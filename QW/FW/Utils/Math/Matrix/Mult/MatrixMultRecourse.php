<?php
/**
 * Created by PhpStorm.
 * User: TomÃ¡Å¡
 * Date: 16. 2. 2016
 * Time: 14:36
 */

namespace QW\FW\Utils\Math\Matrix\Mult;


use QW\FW\Utils\Math\Matrix\Matrix;

class MatrixMultRecourse extends AbstractMatrixMult {

	public function __construct( Matrix $a, Matrix $b, $debug ) {
		parent::__construct( $a, $b, $debug );
	}

	public function __destruct() {
		parent::__destruct(); // TODO: Change the autogenerated stub
	}

	public function mult( Matrix $a = NULL, Matrix $b = NULL ) {
		if ( $a->isSquare() && $a->isSameSize( $b ) ) return new Matrix( $this->mult2( $a, $b ), $this->debug );
		else return NULL;
	}

	private function mult2( Matrix $a = NULL, Matrix $b = NULL ) {
		$n = $a->getMatrixSizeA();
		$c = [ ];

		if ( $n == 1 ) $c[ 1 ][ 1 ] = $a->getMatrix()[ 1 ][ 1 ] * $b->getMatrix()[ 1 ][ 1 ];
		else {
			$c[ 1 ][ 1 ] = $this->mult( $a->getMatrix()[ 1 ][ 1 ], $b->getMatrix()[ 1 ][ 1 ] ) +
				$this->mult( $a->getMatrix()[ 1 ][ 2 ], $b->getMatrix()[ 2 ][ 1 ] );
			$c[ 1 ][ 2 ] = $this->mult( $a->getMatrix()[ 1 ][ 1 ], $b->getMatrix()[ 1 ][ 2 ] ) +
				$this->mult( $a->getMatrix()[ 1 ][ 2 ], $b->getMatrix()[ 2 ][ 2 ] );
			$c[ 2 ][ 1 ] = $this->mult( $a->getMatrix()[ 2 ][ 1 ], $b->getMatrix()[ 1 ][ 1 ] ) +
				$this->mult( $a->getMatrix()[ 2 ][ 2 ], $b->getMatrix()[ 2 ][ 1 ] );
			$c[ 2 ][ 2 ] = $this->mult( $a->getMatrix()[ 2 ][ 1 ], $b->getMatrix()[ 1 ][ 2 ] ) +
				$this->mult( $a->getMatrix()[ 2 ][ 2 ], $b->getMatrix()[ 2 ][ 2 ] );
		}

		return $c;
	}
}